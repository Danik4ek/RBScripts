local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")

local brainrotList = {
    "Noobini pizzanini",
    "Liril√¨ Laril√†",
    "Tim Cheese",
    "Fluriflura",
    "Talpa di ferro",
    "Svinina Bombardino",
    "Pipi Kiwi",
    "Trippi Troppi",
    "Tung Tung Tung Sahur",
    "Gangster Footera",
    "Bandito Bobritto",
    "Boneca Ambalabu",
    "Ta Ta Ta Ta Sahur",
    "Tric Trac Baraboom",
    "Cappuccino Assassino",
    "Brr Brr Patapim",
    "Trulimero Trulicina",
    "Bambini Crostini",
    "Bananita Dolphinita",
    "Perochello Lemonchello",
    "Brri Brri Bicus Dicus Bombicus",
    "Burbaloni Loliloli",
    "Chimpanzini Bananini",
    "Ballerina Cappuccina",
    "Chef Crabracadabra",
    "Lionel Cactuseli",
    "Glorbo Fruttodrillo",
    "Blueberrinni Octopusini",
    "Frigo Camelo",
    "Orangutini Ananassini",
    "Rhino Toasterino",
    "Bombardiro Crocodilo",
    "Bombombini Gusini",
    "Cavallo Virtuoso",
    "Cocofanto Elefanto",
    "Gattatino Nyanino",
    "Girafa Celestre",
    "Matteo",
    "Tralalero Tralala",
    "Odin Din Din Dun",
    "Unclito Samito",
    "Trenostruzzo Turbo 3000",
    "La Vacca Saturno Saturnita",
    "Sammyni Spiderini",
    "Los Tralaleritos",
    "Graipuss Medussi",
    "La Grande Combinazione",
    "Garama and Madundung",
    "Orcalero Orcala and de Tabrak",
    "Developini Braziliaspidini",
    "Kings Coleslaw",
    "Ballerino Lololo",
    "Crocodillo Ananasinno"
}

local function moveToObject(target)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if not game:GetService("RunService"):IsClient() then
        error("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ LocalScript")
        return false
    end

    -- –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    local Players = game:GetService("Players")
    local PathfindingService = game:GetService("PathfindingService")
    
    -- –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    local player = Players.LocalPlayer
    if not player then return false end
    
    local character = player.Character
    if not character then
        player.CharacterAdded:Wait()
        character = player.Character
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then
        print("–£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return false
    end

    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏
    if not target or not target:IsDescendantOf(workspace) then
        print("–¶–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –≤ Workspace")
        return false
    end
    
    -- –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–∏
    local targetPart = target:FindFirstChild("RootPart") or 
                      target:FindFirstChildWhichIsA("BasePart") or
                      target.PrimaryPart
    
    if not targetPart then
        print("–£ —Ü–µ–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
        return false
    end

    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç –ø—É—Ç–∏
    local path = PathfindingService:CreatePath({
        AgentRadius = 1.5,
        AgentHeight = 5,
        AgentCanJump = true
    })
    
    local success, errorMsg = pcall(function()
        path:ComputeAsync(rootPart.Position, targetPart.Position)
    end)
    
    if not success then
        print("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏:", errorMsg)
        return false
    end

    -- –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Ç–æ—á–∫–∞–º
    if path.Status == Enum.PathStatus.Success then
        for _, waypoint in ipairs(path:GetWaypoints()) do
            humanoid:MoveTo(waypoint.Position)
            
            local reached
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                humanoid.Jump = true
                reached = humanoid.MoveToFinished:Wait()  -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä—ã–∂–∫–∞
            else
                reached = humanoid.MoveToFinished:Wait()  -- –ñ–¥–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏
            end
            
            if not reached then
                print("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ç–æ—á–∫–∏")
                return false
            end
        end
        print("–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!")
        return true
    else
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –°—Ç–∞—Ç—É—Å:", path.Status)
        return false
    end
end

local function findSpecificBrainrot()
    local targetX = -410.7
    local tolerance = 0.1  -- –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ X
    local found = false
    
    print("\nüîç –ü–æ–∏—Å–∫ Brainrot –Ω–∞ X ‚âà "..targetX.."...")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞
    for _, brainrotName in ipairs(brainrotList) do
        local obj = workspace:FindFirstChild(brainrotName, true)  -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        
        if obj then
            -- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–¥–ª—è Model –∏–ª–∏ BasePart)
            local position
            if obj:IsA("Model") then
                position = obj.PrimaryPart and obj.PrimaryPart.Position or obj:GetPivot().Position
            elseif obj:IsA("BasePart") then
                position = obj.Position
            end
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X —Å –¥–æ–ø—É—Å–∫–æ–º
            if position and math.abs(position.X - targetX) <= tolerance then
                print(string.format(
                    "‚úÖ –ù–∞–π–¥–µ–Ω: %s | –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: X=%.3f, Y=%.3f, Z=%.3f",
                    brainrotName,
                    position.X,
                    position.Y,
                    position.Z
                ))
                found = true
                
                -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
                moveToObject(obj)
                break
            end
        end
    end
    
    if not found then
        print("‚ùå Brainrot —Å X ‚âà "..targetX.." –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
end


findSpecificBrainrot()
